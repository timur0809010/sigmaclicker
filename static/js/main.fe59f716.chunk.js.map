{"version":3,"sources":["assets/miner.gif","App.js","reportWebVitals.js","index.js"],"names":["App","japidorCoins","setJapidorCoins","useState","balance","setBalance","userId","setUserId","useEffect","window","Telegram","WebApp","tg","expand","user","initDataUnsafe","id","fetch","then","res","json","data","interval","setInterval","prevCoins","clearInterval","_jsxs","className","children","_jsx","src","minerGif","alt","onClick","collectCoins","newBalance","method","headers","body","JSON","stringify","reportWebVitals","onPerfEntry","Function","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","React","StrictMode"],"mappings":"gMAAe,G,MAAA,IAA0B,mC,eCkE1BA,MA9Df,WACE,MAAOC,EAAcC,GAAmBC,mBAAS,IAC1CC,EAASC,GAAcF,mBAAS,IAChCG,EAAQC,GAAaJ,mBAAS,MA4CrC,OA1CAK,qBAAU,KAER,GAAIC,OAAOC,UAAYD,OAAOC,SAASC,OAAQ,CAC7C,MAAMC,EAAKH,OAAOC,SAASC,OAC3BC,EAAGC,SACH,MAAMC,EAAOF,EAAGG,eAAeD,KAC3BA,GAAMP,EAAUO,EAAKE,GAC3B,IACC,IAEHR,qBAAU,KACHF,GAGLW,MAAM,0BAA0BX,KAC7BY,MAAMC,GAAQA,EAAIC,SAClBF,MAAMG,GAAShB,EAAWgB,EAAKjB,SAAW,IAAG,GAC/C,CAACE,IAEJE,qBAAU,KACR,MAAMc,EAAWC,aAAY,KAC3BrB,GAAiBsB,GAAcA,EAAY,GAAE,GAC5C,KAEH,MAAO,IAAMC,cAAcH,EAAS,GACnC,IAkBDI,eAAA,OAAKC,UAAU,MAAKC,SAAA,CAClBF,eAAA,OAAKC,UAAU,UAASC,SAAA,CAAC,yCAASxB,EAAQ,SAC1CyB,cAAA,MAAAD,SAAI,sBACJC,cAAA,OAAKF,UAAU,gBAAeC,SAC5BC,cAAA,OAAKC,IAAKC,EAAUC,IAAI,SAASL,UAAU,gBAE7CD,eAAA,OAAKC,UAAU,QAAOC,SAAA,CAAC,sGAAoB3B,KAC3C4B,cAAA,UAAQF,UAAU,iBAAiBM,QAvBlBC,KACnB,IAAK5B,EAAQ,OACb,MAAM6B,EAAa/B,EAAUH,EAG7BgB,MAAM,mBAAoB,CACxBmB,OAAQ,OACRC,QAAS,CAAE,eAAgB,oBAC3BC,KAAMC,KAAKC,UAAU,CAAElC,SAAQF,QAAS+B,MAG1C9B,EAAW8B,GACXjC,EAAgB,EAAE,EAWyC0B,SAAC,gFAKhE,ECpDea,MAZSC,IAClBA,GAAeA,aAAuBC,UACxC,6BAAqBzB,MAAK0B,IAAkD,IAAjD,OAAEC,EAAM,OAAEC,EAAM,OAAEC,EAAM,OAAEC,EAAM,QAAEC,GAASL,EACpEC,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,EAAY,GAExB,ECHWQ,IAASC,WAAWC,SAASC,eAAe,SACpDC,OACHzB,cAAC0B,IAAMC,WAAU,CAAA5B,SACfC,cAAC7B,EAAG,OAORyC,G","file":"static/js/main.fe59f716.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/miner.b7d3237d.gif\";","import React, { useEffect, useState } from \"react\";\nimport minerGif from \"./assets/miner.gif\"; // Импортируем гифку\nimport \"./App.css\";\n\nfunction App() {\n  const [japidorCoins, setJapidorCoins] = useState(0);\n  const [balance, setBalance] = useState(0);\n  const [userId, setUserId] = useState(null);\n\n  useEffect(() => {\n    // Получаем user_id из Telegram WebApp\n    if (window.Telegram && window.Telegram.WebApp) {\n      const tg = window.Telegram.WebApp;\n      tg.expand();\n      const user = tg.initDataUnsafe.user;\n      if (user) setUserId(user.id);\n    }\n  }, []);\n\n  useEffect(() => {\n    if (!userId) return;\n\n    // Загружаем баланс из API\n    fetch(`/api/getBalance?userId=${userId}`)\n      .then((res) => res.json())\n      .then((data) => setBalance(data.balance || 0));\n  }, [userId]);\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setJapidorCoins((prevCoins) => prevCoins + 1); // Майним по 1 коину\n    }, 1000);\n\n    return () => clearInterval(interval);\n  }, []);\n\n  const collectCoins = () => {\n    if (!userId) return;\n    const newBalance = balance + japidorCoins;\n\n    // Отправляем баланс на сервер\n    fetch(\"/api/saveBalance\", {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({ userId, balance: newBalance }),\n    });\n\n    setBalance(newBalance);\n    setJapidorCoins(0); // Обнуляем накопленные коины\n  };\n\n  return (\n    <div className=\"app\">\n      <div className=\"balance\">Баланс: {balance} JC</div>\n      <h1>JapidorCoin Miner</h1>\n      <div className=\"gif-container\">\n        <img src={minerGif} alt=\"Mining\" className=\"miner-gif\" />\n      </div>\n      <div className=\"coins\">Накопленные коины: {japidorCoins}</div>\n      <button className=\"collect-button\" onClick={collectCoins}>\n        Забрать коины\n      </button>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}